name: Publish version
run-name: 'Publish new version of ${{ inputs.module-to-upgrade }}'
# Cette expression permet de générer un nom de workflow dynamique en fonction des inputs, par exemple:
# - Si tous les inputs sont à false, le nom sera "Inc: XXX"
# - Si on a les inputs autosaver, dashboard et stats-api à true, le nom sera "Inc: XXX Autosaver Dashboard Stats-api"
# La syntaxe 'a && b || c' permet de dire "si a est vrai, alors b, sinon c"

on:
  workflow_dispatch:
    inputs:
      module-to-upgrade:
        description: 'Which module to upgrade'
        required: true
        type: choice
        options:
          - 'devcontainer-base'
          - 'common-variables'

jobs:
  publish-version:
    name: Publish version of ${{ inputs.module-to-upgrade }}
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_AUTHOR: ${{ github.actor }}
    steps:
      - name: Setup git
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "username@users.noreply.github.com"
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Get last version number
        id: latest-version-number
        run: |
          echo "version=$(git tag -l --sort=version:refname "${{ inputs.module-to-upgrade }}-v*" | tail -n 1 | grep -o '[0-9]\+' || echo 0)" >> $GITHUB_OUTPUT
      - name: Get new version
        id: new-version
        run: |
          echo "version=${{ inputs.module-to-upgrade }}-v$((${{ steps.latest-version-number.outputs.version }} + 1))" >> $GITHUB_OUTPUT
      - name: Create new version branch
        run: git checkout -b ${{ steps.new-version.outputs.version }}
      - name: Copy files
        run: |
          cp -r ${{ inputs.module-to-upgrade }} temp
          rm -rf devcontainer-base common-variables
          cp -r temp/* .
      - name: Commit changes
        run: |
          git add .
          git commit -m "${{ steps.new-version.outputs.version }}"
      - name: Create a tag for the new version
        run: |
          git tag "${{ steps.new-version.outputs.version }}"
      - name: Merge new branch to ${{ inputs.module-to-upgrade }}-latest
        run: |
          git checkout ${{ inputs.module-to-upgrade }}-latest || git checkout -b ${{ inputs.module-to-upgrade }}-latest
          git merge --no-ff "${{ steps.new-version.outputs.version }}"
      - name: Update latest tag
        run: |
          git tag -d ${{ inputs.module-to-upgrade }}-latest || echo "No tag to delete"
          git tag ${{ inputs.module-to-upgrade }}-latest
      - name: Push all changes
        run: |
          # Push branches
          git push origin refs/heads/${{ inputs.module-to-upgrade }}-latest refs/heads/${{ steps.new-version.outputs.version }}
          # Push new version tag
          git push origin refs/tags/${{ steps.new-version.outputs.version }}
          # Force push the latest tag
          git push origin refs/tags/${{ inputs.module-to-upgrade }}-latest --force


