name: Publish version
run-name: 'Publish new version of ${{ inputs.module-to-upgrade }}'
# Cette expression permet de générer un nom de workflow dynamique en fonction des inputs, par exemple:
# - Si tous les inputs sont à false, le nom sera "Inc: XXX"
# - Si on a les inputs autosaver, dashboard et stats-api à true, le nom sera "Inc: XXX Autosaver Dashboard Stats-api"
# La syntaxe 'a && b || c' permet de dire "si a est vrai, alors b, sinon c"

on:
  workflow_dispatch:
    inputs:
      module-to-upgrade:
        description: 'Which module to upgrade'
        required: true
        type: choice
        options:
          - 'devcontainer-base'
          - 'common-variables'

jobs:
  publish-version:
    name: Publish version of ${{ inputs.module-to-upgrade }}
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_AUTHOR: ${{ github.actor }}
    steps:
      - name: Setup git
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "username@users.noreply.github.com"
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Create new version branch
        run: |
          # Récupere la derniere branche de version pour le module
          version_number=$(git branch -l --sort=version:refname "${{ inputs.module-to-upgrade }}-v*" | tail -n 1 | grep -o '[0-9]\+')
          version_number=${version_number:-0}
          # Incrémente la version
          version="${{ inputs.module-to-upgrade }}-v$((version_number + 1))"
          echo "New version number: $version_number"
          # Crée une nouvelle branche pour la nouvelle version
          git checkout -b "$version"
          # Copie les fichiers du module dans le dossier 'temp'
          cp -r ${{ inputs.module-to-upgrade }} temp
          # Supprime les fichiers des modules
          rm -rf devcontainer-base common-variables
          # Copie les fichiers de 'temp' dans le dossier source
          cp -r temp/* .
          # Crée un commit pour la nouvelle version
          #git add .
          #git commit -m "$version"
          # Push la nouvelle branche
          #git push --set-upstream origin $version
          


